// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM50 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM50)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          111 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x1f60 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x1d20 		// section header offset, maybe updated by assembler
	.__elf_flags            0x320532 		// Flags, SM_50(0x32), COMPUTE_50(0x32) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            9 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x105 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .shstrtab[6] = b'.text._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0032*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*003a*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*0042*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*004a*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*0052*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*005a*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[7] = b'.nv.info._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*005f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0067*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67
    /*006f*/ .byte 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73
    /*0077*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*007f*/ .byte 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66
    /*0087*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[8] = b'.nv.shared._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*008f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0097*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72
    /*009f*/ .byte 0x65, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74
    /*00a7*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00af*/ .byte 0x65, 0x6c, 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69
    /*00b7*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*00bf*/ .byte 0x66, 0x00

    // .shstrtab[9] = b'.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00c1*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00c9*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00d1*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*00d9*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*00e1*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*00e9*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*00f1*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .shstrtab[10] = b'.nv.rel.action\x00' 
    /*00f6*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*00fe*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x145 	// maybe updated by assembler
	.__section_size         0x133 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .strtab[6] = b'_Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0032*/ .byte 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67, 0x62
    /*003a*/ .byte 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0042*/ .byte 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34
    /*004a*/ .byte 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c
    /*0052*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[7] = b'.text._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0059*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0061*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*0069*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0071*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*0079*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0081*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[8] = b'.nv.info._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*0086*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*008e*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72, 0x65, 0x67
    /*0096*/ .byte 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73
    /*009e*/ .byte 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c
    /*00a6*/ .byte 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69, 0x36, 0x66
    /*00ae*/ .byte 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[9] = b'.nv.shared._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00b6*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00be*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x39, 0x72
    /*00c6*/ .byte 0x65, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74
    /*00ce*/ .byte 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e
    /*00d6*/ .byte 0x65, 0x6c, 0x34, 0x69, 0x6e, 0x74, 0x32, 0x69
    /*00de*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*00e6*/ .byte 0x66, 0x00

    // .strtab[10] = b'.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf\x00' 
    /*00e8*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00f0*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00f8*/ .byte 0x31, 0x39, 0x72, 0x65, 0x67, 0x62, 0x61, 0x6e
    /*0100*/ .byte 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b
    /*0108*/ .byte 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x69, 0x6e
    /*0110*/ .byte 0x74, 0x32, 0x69, 0x36, 0x66, 0x6c, 0x6f, 0x61
    /*0118*/ .byte 0x74, 0x34, 0x50, 0x66, 0x00

    // .strtab[11] = b'_param\x00' 
    /*011d*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[12] = b'.nv.rel.action\x00' 
    /*0124*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*012c*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x278 	// maybe updated by assembler
	.__section_size         0x78 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x3
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 89, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 8, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x59, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 232, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 7, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xe8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".nv.rel.action": Container({'st_name': 292, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 6, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0x24, 0x01, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] "_Z19regbank_test_kernel4int2i6float4Pf": Container({'st_name': 50, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 8, 'st_value': 0, 'st_size': 5952})
    /*0060*/ .byte 0x32, 0x00, 0x00, 0x00, 0x12, 0x10, 0x08, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x40, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x29 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2f0 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0004*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0008*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_7:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_9 - .L_8)
  	.align		4
  .L_8:
          /*0010*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_9:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*001c*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_11:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_13 - .L_12)
  	.align		4
  .L_12:
          /*0028*/ 	.word	index@(_Z19regbank_test_kernel4int2i6float4Pf)
          /*002c*/ 	.word	0x00000000
  .L_13:
  
  
// --------------------- .nv.info._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.nv.info._Z19regbank_test_kernel4int2i6float4Pf,"",@"SHT_CUDA_INFO"
	.__section_name         0x5f 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x320 	// maybe updated by assembler
	.__section_size         0x78 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x8
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_15:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_17 - .L_16)
  	.align		4
  .L_16:
          /*0014*/ 	.word	index@(.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0028
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_17:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0028
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_19 - .L_18)
  .L_18:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0003
          /*002a*/ 	.short	0x0020
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_19:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_21 - .L_20)
  .L_20:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0002
          /*003a*/ 	.short	0x0010
          /*003c*/ 	.byte	0x00, 0xf0, 0x41, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_21:
          /*0040*/ 	.byte	0x04, 0x17
          /*0042*/ 	.short	(.L_23 - .L_22)
  .L_22:
          /*0044*/ 	.word	0x00000000
          /*0048*/ 	.short	0x0001
          /*004a*/ 	.short	0x0008
          /*004c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_23:
          /*0050*/ 	.byte	0x04, 0x17
          /*0052*/ 	.short	(.L_25 - .L_24)
  .L_24:
          /*0054*/ 	.word	0x00000000
          /*0058*/ 	.short	0x0000
          /*005a*/ 	.short	0x0000
          /*005c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_25:
          /*0060*/ 	.byte	0x03, 0x1b
          /*0062*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
          /*0064*/ 	.byte	0x04, 0x1d
          /*0066*/ 	.short	(.L_27 - .L_26)
  
  
  	//   ....[0]....
  .L_26:
          /*0068*/ 	.word	0x00001668
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_27:
          /*006c*/ 	.byte	0x04, 0x1c
          /*006e*/ 	.short	(.L_29 - .L_28)
  
  
  	//   ....[0]....
  .L_28:
          /*0070*/ 	.word	0x000016b0
  
  
  	//   ....[1]....
          /*0074*/ 	.word	0x00001708
  .L_29:
  
  
// --------------------- .nv.rel.action                   --------------------------
	.section	.nv.rel.action,"",@"SHT_CUDA_RELOCINFO"
	.__section_name         0xf6 	// offset in .shstrtab
	.__section_type         1879048203
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x398 	// maybe updated by assembler
	.__section_size         0xd0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      8
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.sectionentsize	8
          /*0000*/ 	.byte	0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x08, 0x10, 0x0a, 0x2f, 0x22
          /*0010*/ 	.byte	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0020*/ 	.byte	0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0050*/ 	.byte	0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0060*/ 	.byte	0x01, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0070*/ 	.byte	0x01, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0080*/ 	.byte	0x01, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0090*/ 	.byte	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00a0*/ 	.byte	0x02, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00b0*/ 	.byte	0x02, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00c0*/ 	.byte	0x02, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.constant0._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.nv.constant0._Z19regbank_test_kernel4int2i6float4Pf,"a",@progbits
	.__section_name         0xc1 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x468 	// maybe updated by assembler
	.__section_size         0x168 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x8
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z19regbank_test_kernel4int2i6float4Pf:
  	.zero		360
  
  
// --------------------- .text._Z19regbank_test_kernel4int2i6float4Pf --------------------------
	.section	.text._Z19regbank_test_kernel4int2i6float4Pf,"ax",@progbits
	.__section_name         0x32 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0x5e0 	// maybe updated by assembler
	.__section_size         0x1740 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x6000004
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=32"
        // @CUASM_INSERT_MARKER_POS.REGNUM   
  	.align	32
          .global         _Z19regbank_test_kernel4int2i6float4Pf
          .type           _Z19regbank_test_kernel4int2i6float4Pf,@function
          .size           _Z19regbank_test_kernel4int2i6float4Pf,(.L_30 - _Z19regbank_test_kernel4int2i6float4Pf)
          .other          _Z19regbank_test_kernel4int2i6float4Pf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z19regbank_test_kernel4int2i6float4Pf:
  .text._Z19regbank_test_kernel4int2i6float4Pf:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W-:-:S00]         /*0010*/         {         MOV R4, c[0x0][0x150] ;
      [----:B------:R-:W0:-:S15]         /*0018*/                   S2R R0, SR_TID.X         }
      [----:B0-----:R-:W-:-:S06]         /*0028*/                   SHR R2, R0, 0x1f ;
      [----:B------:R-:W-:-:S06]         /*0030*/                   LEA.HI R2, R2, R0, RZ, 0x5 ;
      [----:B------:R-:W-:-:S06]         /*0038*/                   SHR R2, R2, 0x5 ;
      [----:B------:R-:W-:Y:S13]         /*0048*/                   ISETP.LT.AND P0, PT, R2, c[0x0][0x140], PT ;
      // @CUASM_INSERT_MARKER_POS.INIT
      [----:B------:R-:W-:-:S13]         /*0050*/               @P0 BRA `(.L_1) ;
      [----:B------:R-:W-:-:S06]         /*0058*/                   MOV R3, c[0x0][0x148] ;
      [----:B------:R-:W-:Y:S13]         /*0068*/                   ISETP.LT.AND P0, PT, R3, 0x1, PT ;
      [----:B------:R-:W-:-:S13]         /*0070*/               @P0 BRA `(.L_2) ;
      [----:B------:R-:W-:-:S06]         /*0078*/                   MOV R5, RZ ;
  .L_3:
      [----:B------:R-:W-:-:S06]         /*0090*/                   IADD32I R5, R5, 0x1 ;
      [----:B------:R-:W-:Y:S15]         /*00a8*/                   ISETP.LT.AND P0, PT, R5, c[0x0][0x148], PT ;
      // @CUASM_INSERT_MARKER_POS.WORK_2
      // R4 will be write back
      [----:B------:R-:W-:-:S13]         /*0b50*/               @P0 BRA `(.L_3) ;
      [----:B------:R-:W-:-:S13]         /*0b58*/                   BRA `(.L_2) ;
  .L_1:
      [----:B------:R-:W-:-:S06]         /*0b68*/                   MOV R3, c[0x0][0x148] ;
      [----:B------:R-:W-:Y:S13]         /*0b70*/                   ISETP.LT.AND P0, PT, R3, 0x1, PT ;
      [----:B------:R-:W-:-:S13]         /*0b78*/               @P0 BRA `(.L_2) ;
      [----:B------:R-:W-:-:S06]         /*0b88*/                   MOV R3, RZ ;
  .L_4:
      [----:B------:R-:W-:-:S06]         /*0b98*/                   IADD32I R3, R3, 0x1 ;
      [----:B------:R-:W-:Y:S15]         /*0bb0*/                   ISETP.LT.AND P0, PT, R3, c[0x0][0x148], PT ;
      // @CUASM_INSERT_MARKER_POS.WORK_1
      // R4 will be write back
      [----:B------:R-:W-:-:S13]         /*1650*/               @P0 BRA `(.L_4) ;
  .L_2:
      // @CUASM_INSERT_MARKER_POS.FINALIZE  
      [----:B------:R-:W-:-:S00]         /*1658*/         {         MOV32I R5, 0x1f ;
      [----:B------:R-:W0:-:S01]         /*1668*/                   S2R R3, SR_CTAID.X         }
      // [----:B------:R-:W-:-:S15]         /*1670*/                   BAR.SYNC 0x0 ;
      [----:B------:R-:W-:-:S05]         /*1678*/                   MEMBAR.CTA ;
      [----:B0-----:R-:W-:Y:S13]         /*1688*/                   LOP3.LUT.NZ P0, RZ, R3, R5, R0, 0xf8 ;
      [----:B------:R-:W-:Y:S15]         /*1690*/                   NOP ;
      [----:B------:R-:W-:Y:S15]         /*1698*/                   NOP ;
      [----:B------:R-:W-:Y:S10]         /*16a8*/                   NOP ;
      [----:B------:R-:W-:-:S13]         /*16b0*/               @P0 EXIT ;
      [R---:B------:R-:W-:-:S01]         /*16b8*/                   SHR R0, R2.reuse, 0x1e ;
      [----:B------:R-:W-:-:S06]         /*16c8*/                   ISCADD R2.CC, R2, c[0x0][0x160], 0x2 ;
      [----:B------:R-:W-:-:S02]         /*16d0*/                   IADD.X R3, R0, c[0x0][0x164] ;
      [----:B------:R-:W-:-:S05]         /*16d8*/                   STG.E [R2], R4 ;
      [----:B------:R-:W-:Y:S15]         /*16e8*/                   NOP ;
      [----:B------:R-:W-:Y:S15]         /*16f0*/                   NOP ;
      [----:B------:R-:W-:Y:S05]         /*16f8*/                   NOP ;
      [----:B------:R-:W-:-:S15]         /*1708*/                   EXIT ;
  .L_5:
      [----:B------:R-:W-:-:S15]         /*1710*/                   BRA `(.L_5) ;
  .L_30:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0x1f60   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x468   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x18b8   		// file size, maybe updated by assembler 
  .__segment_memsz   0x18b8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z19regbank_test_kernel4int2i6float4Pf"  		// first section in this segment 
  .__segment_endsection      ".text._Z19regbank_test_kernel4int2i6float4Pf"  		// last  section in this segment 

// Program segment PT_LOAD, 6 
  .__segment  "PT_LOAD", 6 
  .__segment_offset  0x0   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x0   		// file size, maybe updated by assembler 
  .__segment_memsz   0x0   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ""  		// first section in this segment 
  .__segment_endsection      ""  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


